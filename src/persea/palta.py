# c-basic-offset: 4; tab-width: 8; indent-tabs-mode: nil
# vi: set shiftwidth=4 tabstop=8 expandtab:
# :indentSize=4:tabSize=8:noTabs=true:
#
# SPDX-FileCopyrightText: 2024-present Intel Corporation
#
# SPDX-License-Identifier: GPL-3.0-or-later
"""Avocado-framework functions module file"""

import os
import stat
import sys

from avocado.core.job import Job
from avocado.core.nrunner.runnable import Runnable
from avocado.core.suite import TestSuite
from avocado.utils.path import CmdNotFoundError
from avocado.utils.path import find_command


def get_wrapper_script() -> str:
    the_script = """#!/bin/bash
# Autogenerated wrapper script by presea, do not modify
# SPDX-FileCopyrightText: 2024 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later
# Test Case Path
TC_PATH=$1
# Test Case
TC=$2
# Needs sudo
SD=$3
full_path = $(realpath ${TC_PATH}/${TC})
pushd ${full_path}
${SD} bash Do_*.sh
ret=$?
popd
exit $ret """
    return the_script


def create_wrapper_script(script: str) -> int:
    str_path = str(os.environ.get("PATH"))
    str_home = str(os.environ.get("HOME"))
    lst_path = str_path.split(":")

    if str_home + "/.local/bin" not in lst_path:
        # $HOME/.local/bin not in $PATH
        return 1

    path = str_home + "/.local/bin/" + script

    if os.path.exists(path):
        # Wrapper script already exist
        return 2

    with open(path, mode="w", encoding="utf-8") as wp_script:
        wp_script.write(get_wrapper_script())

    # chmod 740 path
    os.chmod(path, stat.S_IRWXU | stat.S_IRGRP)

    return 0


def run_test() -> None:
    wrapper_script = "aguacate.bash"

    try:
        # FullPath wrapper script
        fp_ws = find_command(wrapper_script)
    except CmdNotFoundError:
        if not create_wrapper_script(wrapper_script):
            return
        try:
            fp_ws = find_command(wrapper_script)
        except CmdNotFoundError:
            return

    runnable_list = []

    runnable_list.append(
        Runnable("exec-test", fp_ws, "/home/ubuntu/TestCase", "Processor/Cpuinfo_check")
    )

    runnable_list.append(
        Runnable(
            "exec-test", fp_ws, "/home/ubuntu/TestCase", "Processor/check_5level_page"
        )
    )

    runnable_list.append(Runnable("exec-test", "/bin/true"))
    runnable_list.append(Runnable("exec-test", "/usr/bin/echo", "Hello World!"))
    runnable_list.append(
        Runnable(
            "exec-test", "/usr/bin/echo", "Hello World!", identifier="echo-hello-world"
        )
    )

    suite = TestSuite(name="exec-test", tests=runnable_list)

    with Job(test_suites=[suite]) as j:
        sys.exit(j.run())
